{
  "version": 3,
  "sources": ["../../@mui/material/esm/Box/Box.js", "../../@mui/material/esm/styles/ThemeProvider.js", "../../@mui/material/esm/styles/ThemeProviderNoVars.js", "../../@mui/material/esm/styles/ThemeProviderWithVars.js", "../../@mui/material/esm/InitColorSchemeScript/InitColorSchemeScript.js", "../../@mui/material/esm/Box/boxClasses.js"],
  "sourcesContent": ["'use client';\r\n\r\nimport { createBox } from '@mui/system';\r\nimport PropTypes from 'prop-types';\r\nimport { unstable_ClassNameGenerator as ClassNameGenerator } from \"../className/index.js\";\r\nimport { createTheme } from \"../styles/index.js\";\r\nimport THEME_ID from \"../styles/identifier.js\";\r\nimport boxClasses from \"./boxClasses.js\";\r\nconst defaultTheme = createTheme();\r\nconst Box = createBox({\r\n  themeId: THEME_ID,\r\n  defaultTheme,\r\n  defaultClassName: boxClasses.root,\r\n  generateClassName: ClassNameGenerator.generate\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * @ignore\r\n   */\r\n  children: PropTypes.node,\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes.elementType,\r\n  /**\r\n   * The system prop that allows defining system overrides as well as additional CSS styles.\r\n   */\r\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\r\n} : void 0;\r\nexport default Box;", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport ThemeProviderNoVars from \"./ThemeProviderNoVars.js\";\r\nimport { CssVarsProvider } from \"./ThemeProviderWithVars.js\";\r\nimport THEME_ID from \"./identifier.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport default function ThemeProvider({\r\n  theme,\r\n  ...props\r\n}) {\r\n  const noVarsTheme = React.useMemo(() => {\r\n    if (typeof theme === 'function') {\r\n      return theme;\r\n    }\r\n    const muiTheme = THEME_ID in theme ? theme[THEME_ID] : theme;\r\n    if (!('colorSchemes' in muiTheme)) {\r\n      if (!('vars' in muiTheme)) {\r\n        // For non-CSS variables themes, set `vars` to null to prevent theme inheritance from the upper theme.\r\n        // The example use case is the docs demo that uses ThemeProvider to customize the theme while the upper theme is using CSS variables.\r\n        return {\r\n          ...theme,\r\n          vars: null\r\n        };\r\n      }\r\n      return theme;\r\n    }\r\n    return null;\r\n  }, [theme]);\r\n  if (noVarsTheme) {\r\n    return /*#__PURE__*/_jsx(ThemeProviderNoVars, {\r\n      theme: noVarsTheme,\r\n      ...props\r\n    });\r\n  }\r\n  return /*#__PURE__*/_jsx(CssVarsProvider, {\r\n    theme: theme,\r\n    ...props\r\n  });\r\n}", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport { ThemeProvider as SystemThemeProvider } from '@mui/system';\r\nimport THEME_ID from \"./identifier.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport default function ThemeProviderNoVars({\r\n  theme: themeInput,\r\n  ...props\r\n}) {\r\n  const scopedTheme = THEME_ID in themeInput ? themeInput[THEME_ID] : undefined;\r\n  return /*#__PURE__*/_jsx(SystemThemeProvider, {\r\n    ...props,\r\n    themeId: scopedTheme ? THEME_ID : undefined,\r\n    theme: scopedTheme || themeInput\r\n  });\r\n}", "'use client';\r\n\r\nimport * as React from 'react';\r\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\r\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\r\nimport createTheme from \"./createTheme.js\";\r\nimport createTypography from \"./createTypography.js\";\r\nimport THEME_ID from \"./identifier.js\";\r\nimport { defaultConfig } from \"../InitColorSchemeScript/InitColorSchemeScript.js\";\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nconst {\r\n  CssVarsProvider: InternalCssVarsProvider,\r\n  useColorScheme,\r\n  getInitColorSchemeScript: deprecatedGetInitColorSchemeScript\r\n} = createCssVarsProvider({\r\n  themeId: THEME_ID,\r\n  // @ts-ignore ignore module augmentation tests\r\n  theme: () => createTheme({\r\n    cssVariables: true\r\n  }),\r\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\r\n  modeStorageKey: defaultConfig.modeStorageKey,\r\n  defaultColorScheme: {\r\n    light: defaultConfig.defaultLightColorScheme,\r\n    dark: defaultConfig.defaultDarkColorScheme\r\n  },\r\n  resolveTheme: theme => {\r\n    const newTheme = {\r\n      ...theme,\r\n      typography: createTypography(theme.palette, theme.typography)\r\n    };\r\n    newTheme.unstable_sx = function sx(props) {\r\n      return styleFunctionSx({\r\n        sx: props,\r\n        theme: this\r\n      });\r\n    };\r\n    return newTheme;\r\n  }\r\n});\r\nlet warnedOnce = false;\r\n\r\n// TODO: remove in v7\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nfunction Experimental_CssVarsProvider(props) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (!warnedOnce) {\r\n      console.warn(['MUI: The Experimental_CssVarsProvider component has been ported into ThemeProvider.', '', \"You should use `import { ThemeProvider } from '@mui/material/styles'` instead.\", 'For more details, check out https://mui.com/material-ui/customization/css-theme-variables/usage/'].join('\\n'));\r\n      warnedOnce = true;\r\n    }\r\n  }\r\n  return /*#__PURE__*/_jsx(InternalCssVarsProvider, {\r\n    ...props\r\n  });\r\n}\r\nlet warnedInitScriptOnce = false;\r\n\r\n// TODO: remove in v7\r\nconst getInitColorSchemeScript = params => {\r\n  if (!warnedInitScriptOnce) {\r\n    console.warn(['MUI: The getInitColorSchemeScript function has been deprecated.', '', \"You should use `import InitColorSchemeScript from '@mui/material/InitColorSchemeScript'`\", 'and replace the function call with `<InitColorSchemeScript />` instead.'].join('\\n'));\r\n    warnedInitScriptOnce = true;\r\n  }\r\n  return deprecatedGetInitColorSchemeScript(params);\r\n};\r\n\r\n/**\r\n * TODO: remove this export in v7\r\n * @deprecated\r\n * The `CssVarsProvider` component has been deprecated and ported into `ThemeProvider`.\r\n *\r\n * You should use `ThemeProvider` and `createTheme()` instead:\r\n *\r\n * ```diff\r\n * - import { CssVarsProvider, extendTheme } from '@mui/material/styles';\r\n * + import { ThemeProvider, createTheme } from '@mui/material/styles';\r\n *\r\n * - const theme = extendTheme();\r\n * + const theme = createTheme({\r\n * +   cssVariables: true,\r\n * +   colorSchemes: { light: true, dark: true },\r\n * + });\r\n *\r\n * - <CssVarsProvider theme={theme}>\r\n * + <ThemeProvider theme={theme}>\r\n * ```\r\n *\r\n * To see the full documentation, check out https://mui.com/material-ui/customization/css-theme-variables/usage/.\r\n */\r\nexport const CssVarsProvider = InternalCssVarsProvider;\r\nexport { useColorScheme, getInitColorSchemeScript, Experimental_CssVarsProvider };", "import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SystemInitColorSchemeScript from '@mui/system/InitColorSchemeScript';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const defaultConfig = {\r\n  attribute: 'data-mui-color-scheme',\r\n  colorSchemeStorageKey: 'mui-color-scheme',\r\n  defaultLightColorScheme: 'light',\r\n  defaultDarkColorScheme: 'dark',\r\n  modeStorageKey: 'mui-mode'\r\n};\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [InitColorSchemeScript](https://mui.com/material-ui/react-init-color-scheme-script/)\r\n *\r\n * API:\r\n *\r\n * - [InitColorSchemeScript API](https://mui.com/material-ui/api/init-color-scheme-script/)\r\n */\r\nfunction InitColorSchemeScript(props) {\r\n  const {\r\n    defaultMode = 'system',\r\n    defaultLightColorScheme = defaultConfig.defaultLightColorScheme,\r\n    defaultDarkColorScheme = defaultConfig.defaultDarkColorScheme,\r\n    modeStorageKey = defaultConfig.modeStorageKey,\r\n    colorSchemeStorageKey = defaultConfig.colorSchemeStorageKey,\r\n    attribute: initialAttribute = defaultConfig.attribute,\r\n    colorSchemeNode = 'document.documentElement',\r\n    nonce\r\n  } = props;\r\n  return /*#__PURE__*/_jsx(SystemInitColorSchemeScript, {\r\n    defaultMode: defaultMode,\r\n    defaultLightColorScheme: defaultLightColorScheme,\r\n    defaultDarkColorScheme: defaultDarkColorScheme,\r\n    modeStorageKey: modeStorageKey,\r\n    colorSchemeStorageKey: colorSchemeStorageKey,\r\n    attribute: initialAttribute,\r\n    colorSchemeNode: colorSchemeNode,\r\n    nonce: nonce\r\n  });\r\n}\r\nprocess.env.NODE_ENV !== \"production\" ? InitColorSchemeScript.propTypes /* remove-proptypes */ = {\r\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\r\n  // │ These PropTypes are generated from the TypeScript type definitions. │\r\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\r\n  // └─────────────────────────────────────────────────────────────────────┘\r\n  /**\r\n   * DOM attribute for applying a color scheme.\r\n   * @default 'data-mui-color-scheme'\r\n   * @example '.mode-%s' // for class based color scheme\r\n   * @example '[data-mode-%s]' // for data-attribute without '='\r\n   */\r\n  attribute: PropTypes.string,\r\n  /**\r\n   * The node (provided as string) used to attach the color-scheme attribute.\r\n   * @default 'document.documentElement'\r\n   */\r\n  colorSchemeNode: PropTypes.string,\r\n  /**\r\n   * localStorage key used to store `colorScheme`.\r\n   * @default 'mui-color-scheme'\r\n   */\r\n  colorSchemeStorageKey: PropTypes.string,\r\n  /**\r\n   * The default color scheme to be used in dark mode.\r\n   * @default 'dark'\r\n   */\r\n  defaultDarkColorScheme: PropTypes.string,\r\n  /**\r\n   * The default color scheme to be used in light mode.\r\n   * @default 'light'\r\n   */\r\n  defaultLightColorScheme: PropTypes.string,\r\n  /**\r\n   * The default mode when the storage is empty (user's first visit).\r\n   * @default 'system'\r\n   */\r\n  defaultMode: PropTypes.oneOf(['dark', 'light', 'system']),\r\n  /**\r\n   * localStorage key used to store `mode`.\r\n   * @default 'mui-mode'\r\n   */\r\n  modeStorageKey: PropTypes.string,\r\n  /**\r\n   * Nonce string to pass to the inline script for CSP headers.\r\n   */\r\n  nonce: PropTypes.string\r\n} : void 0;\r\nexport default InitColorSchemeScript;", "import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\r\nconst boxClasses = generateUtilityClasses('MuiBox', ['root']);\r\nexport default boxClasses;"],
  "mappings": "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",
  "names": ["import_prop_types", "React", "React", "React", "import_jsx_runtime", "InitColorSchemeScript", "_jsx", "PropTypes", "import_jsx_runtime", "import_jsx_runtime", "PropTypes"]
}
